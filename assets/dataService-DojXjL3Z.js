const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-3_hS9l67.js","assets/index-B7rZpWz0.css"])))=>i.map(i=>d[i]);
import{a2 as h,v as P}from"./index-3_hS9l67.js";class U{static applyTagFilters(t,e,r="OR"){if(e.length===0)return t;switch(r){case"OR":return t.filter("tags","cs",JSON.stringify(e));case"AND":return e.forEach(a=>{t=t.contains("tags",[a])}),t;case"SINGLE":return t.contains("tags",[e[0]]);default:return t}}static async fetchPackagesWithTag(t){try{const{data:e,error:r}=await h.from("packages").select("*").contains("tags",[t.trim()]);if(r)throw r;return e||[]}catch(e){throw console.error("Error fetching packages with tag:",e),e}}static async fetchFilterMetadata(){console.log("📊 Fetching filter metadata...");const t=performance.now();try{console.log("📊 Starting parallel metadata queries...");const e=this.fetchUniqueTags().then(o=>(console.log(`✅ Tags fetched: ${o.length} unique tags`),o)).catch(o=>{throw console.error("❌ Error fetching tags:",o),o}),r=this.fetchUniqueLicenses().then(o=>(console.log(`✅ Licenses fetched: ${o.length} unique licenses`),o)).catch(o=>{throw console.error("❌ Error fetching licenses:",o),o}),a=this.fetchFoldersAndCategories().then(o=>(console.log(`✅ Folders/Categories fetched: ${o.folders.length} folders`),o)).catch(o=>{throw console.error("❌ Error fetching folders/categories:",o),o}),c=this.fetchDatasetStats().then(o=>(console.log(`✅ Stats fetched: ${o.totalCount} total packages`),o)).catch(o=>{throw console.error("❌ Error fetching stats:",o),o}),[l,i,g,n]=await Promise.all([e,r,a,c]),f=((performance.now()-t)/1e3).toFixed(2);return console.log(`📊 Metadata fetch completed in ${f}s`),{allAvailableTags:l,allAvailableLicenses:i,allAvailableFolders:g.folders,allAvailableCategories:g.categories,datasetMaxStars:n.maxStars,datasetMaxCitations:n.maxCitations,totalPackageCount:n.totalCount}}catch(e){throw console.error("❌ Error fetching filter metadata:",e),e}}static async refreshFilterMetadata(){console.log("🔄 Refreshing filter metadata...");try{const t=await this.fetchFilterMetadata(),{useFilterStore:e}=await P(async()=>{const{useFilterStore:r}=await import("./index-3_hS9l67.js").then(a=>a.aI);return{useFilterStore:r}},__vite__mapDeps([0,1]));e.setState({allAvailableTags:t.allAvailableTags,allAvailableLicenses:t.allAvailableLicenses,allAvailableFolders:t.allAvailableFolders,allAvailableCategories:t.allAvailableCategories,datasetMaxStars:t.datasetMaxStars,datasetMaxCitations:t.datasetMaxCitations}),console.log("✅ Filter metadata refreshed successfully")}catch(t){throw console.error("❌ Error refreshing filter metadata:",t),t}}static async fetchPackages(t){const{searchTerm:e,selectedTags:r=[],minStars:a=null,hasGithub:c,hasWebserver:l,hasPublication:i,minCitations:g=null,minRating:n=null,folder1:f,category1:o,selectedLicenses:m=[],sortBy:p="package_name",sortDirection:E="asc",page:w=1,pageSize:y=24,includeUserRatings:A=!1,currentUserId:F=null}=t,C=performance.now(),k=(w-1)*y,q=k+y-1;console.log(`🔎 Fetching packages (page ${w})...`);try{let s=h.from("packages").select("*",{count:"exact"});e&&(s=s.or(`package_name.ilike.%${e}%,description.ilike.%${e}%`)),s=this.applyTagFilters(s,r,"OR"),a!==null&&a>0&&(s=s.gte("github_stars",a)),c&&(s=s.not("repo_link","is",null)),l&&(s=s.not("webserver","is",null)),i&&(s=s.not("publication","is",null)),g!==null&&g>0&&(s=s.gte("citations",g)),n!==null&&n>0&&(s=s.gte("average_rating",n)),f&&(s=s.eq("folder1",f)),o&&(s=s.eq("category1",o)),m.length>0&&(s=s.in("license",m)),p&&(s=s.order(p,{ascending:E==="asc",nullsFirst:!1})),s=s.range(k,q);const{data:v,error:b,count:_}=await s;if(b)throw b;let d=v||[];if(A&&F&&d.length>0){console.log(`🔖 Fetching user ratings for ${d.length} packages...`);const $=d.map(u=>u.id),S=await this.fetchUserRatingsForPackages($,F);d=d.map(u=>{var T,x;return{...u,user_rating:((T=S.get(u.id))==null?void 0:T.rating)||null,user_rating_id:((x=S.get(u.id))==null?void 0:x.rating_id)||null}})}const M=((performance.now()-C)/1e3).toFixed(2);return console.log(`🔎 Package fetch completed in ${M}s. Total matches: ${_}, returned: ${d.length}`),{packages:d,totalCount:_||0}}catch(s){throw console.error("❌ Error fetching packages:",s),s}}static async fetchUserRatingsForPackages(t,e){try{const{data:r,error:a}=await h.from("ratings").select("package_id, rating, id").eq("user_id",e).in("package_id",t);if(a)throw a;const c=new Map;return r&&r.forEach(l=>{c.set(l.package_id,{rating:l.rating,rating_id:l.id})}),c}catch(r){return console.error("Error fetching user ratings for packages:",r),new Map}}static async fetchUserRatingForPackage(t,e){try{const{data:r,error:a}=await h.from("ratings").select("rating, id").eq("user_id",e).eq("package_id",t).single();if(a){if(a.code==="PGRST116")return null;throw a}return{rating:r.rating,rating_id:r.id}}catch(r){return console.error("Error fetching user rating for package:",r),null}}static async fetchUniqueTags(){console.log("  📌 Fetching unique tags...");const t=performance.now();try{const e=new Set;let r=0;const a=1e3;let c=!0,l=0;for(;c;){const{data:i,error:g}=await h.from("packages").select("tags").not("tags","is",null).range(r,r+a-1);if(g)throw console.error("  ❌ Tags query error:",g),g;if(!i||i.length===0){c=!1;break}i.forEach(n=>{n.tags&&Array.isArray(n.tags)&&n.tags.forEach(f=>{f&&f.trim()&&e.add(f.trim())})}),l+=i.length,c=i.length===a,r+=a}return console.log(`  📌 Tags query completed, processed ${l} total rows in ${((performance.now()-t)/1e3).toFixed(2)}s`),Array.from(e).sort()}catch(e){throw console.error("  ❌ Failed to fetch tags:",e),e}}static async fetchUniqueLicenses(){console.log("  📜 Fetching unique licenses...");const t=performance.now();try{const e=new Set;let r=0;const a=1e3;let c=!0,l=0;for(;c;){const{data:i,error:g}=await h.from("packages").select("license").not("license","is",null).range(r,r+a-1);if(g)throw console.error("  ❌ Licenses query error:",g),g;if(!i||i.length===0){c=!1;break}i.forEach(n=>{n.license&&n.license.trim()&&e.add(n.license.trim())}),l+=i.length,c=i.length===a,r+=a}return console.log(`  📜 Licenses query completed, processed ${l} total rows in ${((performance.now()-t)/1e3).toFixed(2)}s`),Array.from(e).sort()}catch(e){throw console.error("  ❌ Failed to fetch licenses:",e),e}}static async fetchFoldersAndCategories(){console.log("  📁 Fetching folders and categories...");const t=performance.now();try{const e={};let r=0;const a=1e3;let c=!0,l=0;for(;c;){const{data:n,error:f}=await h.from("packages").select("folder1, category1").not("folder1","is",null).range(r,r+a-1);if(f)throw console.error("  ❌ Folders/categories query error:",f),f;if(!n||n.length===0){c=!1;break}n.forEach(o=>{o.folder1&&(e[o.folder1]||(e[o.folder1]=new Set),o.category1&&e[o.folder1].add(o.category1))}),l+=n.length,c=n.length===a,r+=a}console.log(`  📁 Folders/categories query completed, processed ${l} total rows in ${((performance.now()-t)/1e3).toFixed(2)}s`);const i=Object.keys(e).sort(),g={};for(const n in e)g[n]=Array.from(e[n]).sort();return{folders:i,categories:g}}catch(e){throw console.error("  ❌ Failed to fetch folders/categories:",e),e}}static async fetchDatasetStats(){var e,r;console.log("  📊 Fetching dataset statistics...");const t=performance.now();try{console.log("    ⭐ Fetching max stars...");const{data:a,error:c}=await h.from("packages").select("github_stars").not("github_stars","is",null).order("github_stars",{ascending:!1}).limit(1);if(c)throw console.error("    ❌ Max stars query error:",c),c;console.log("    📚 Fetching max citations...");const{data:l,error:i}=await h.from("packages").select("citations").not("citations","is",null).order("citations",{ascending:!1}).limit(1);if(i)throw console.error("    ❌ Max citations query error:",i),i;console.log("    🔢 Fetching total count...");const{count:g,error:n}=await h.from("packages").select("*",{count:"exact",head:!0});if(n)throw console.error("    ❌ Count query error:",n),n;return console.log(`  📊 Stats queries completed in ${((performance.now()-t)/1e3).toFixed(2)}s`),{maxStars:((e=a==null?void 0:a[0])==null?void 0:e.github_stars)||null,maxCitations:((r=l==null?void 0:l[0])==null?void 0:r.citations)||null,totalCount:g||0}}catch(a){throw console.error("  ❌ Failed to fetch dataset stats:",a),a}}}export{U as DataService};
