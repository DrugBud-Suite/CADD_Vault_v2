const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-DRiBbmay.js","assets/index-B7rZpWz0.css"])))=>i.map(i=>d[i]);
import{t as T,a2 as h}from"./index-DRiBbmay.js";class ${static async fetchFilterMetadata(){console.log("📊 Fetching filter metadata...");const s=performance.now();try{console.log("📊 Starting parallel metadata queries...");const e=this.fetchUniqueTags().then(t=>(console.log(`✅ Tags fetched: ${t.length} unique tags`),t)).catch(t=>{throw console.error("❌ Error fetching tags:",t),t}),n=this.fetchUniqueLicenses().then(t=>(console.log(`✅ Licenses fetched: ${t.length} unique licenses`),t)).catch(t=>{throw console.error("❌ Error fetching licenses:",t),t}),a=this.fetchFoldersAndCategories().then(t=>(console.log(`✅ Folders/Categories fetched: ${t.folders.length} folders`),t)).catch(t=>{throw console.error("❌ Error fetching folders/categories:",t),t}),c=this.fetchDatasetStats().then(t=>(console.log(`✅ Stats fetched: ${t.totalCount} total packages`),t)).catch(t=>{throw console.error("❌ Error fetching stats:",t),t}),[g,l,i,r]=await Promise.all([e,n,a,c]),f=((performance.now()-s)/1e3).toFixed(2);return console.log(`📊 Metadata fetch completed in ${f}s`),{allAvailableTags:g,allAvailableLicenses:l,allAvailableFolders:i.folders,allAvailableCategories:i.categories,datasetMaxStars:r.maxStars,datasetMaxCitations:r.maxCitations,totalPackageCount:r.totalCount}}catch(e){throw console.error("❌ Error fetching filter metadata:",e),e}}static async refreshFilterMetadata(){console.log("🔄 Refreshing filter metadata...");try{const s=await this.fetchFilterMetadata(),{useFilterStore:e}=await T(async()=>{const{useFilterStore:n}=await import("./index-DRiBbmay.js").then(a=>a.aH);return{useFilterStore:n}},__vite__mapDeps([0,1]));e.setState({allAvailableTags:s.allAvailableTags,allAvailableLicenses:s.allAvailableLicenses,allAvailableFolders:s.allAvailableFolders,allAvailableCategories:s.allAvailableCategories,datasetMaxStars:s.datasetMaxStars,datasetMaxCitations:s.datasetMaxCitations}),console.log("✅ Filter metadata refreshed successfully")}catch(s){throw console.error("❌ Error refreshing filter metadata:",s),s}}static async fetchPackages(s){const{searchTerm:e,selectedTags:n=[],minStars:a=null,hasGithub:c,hasWebserver:g,hasPublication:l,minCitations:i=null,minRating:r=null,folder1:f,category1:t,selectedLicenses:u=[],sortBy:m="package_name",sortDirection:S="asc",page:p=1,pageSize:w=24}=s,k=performance.now(),y=(p-1)*w,x=y+w-1;console.log(`🔎 Fetching packages (page ${p})...`);try{let o=h.from("packages").select("*",{count:"exact"});e&&(o=o.or(`package_name.ilike.%${e}%,description.ilike.%${e}%`)),n.length>0&&n.forEach(C=>{o=o.contains("tags",[C])}),a!==null&&a>0&&(o=o.gte("github_stars",a)),c&&(o=o.not("repo_link","is",null)),g&&(o=o.not("webserver","is",null)),l&&(o=o.not("publication","is",null)),i!==null&&i>0&&(o=o.gte("citations",i)),r!==null&&r>0&&(o=o.gte("average_rating",r)),f&&(o=o.eq("folder1",f)),t&&(o=o.eq("category1",t)),u.length>0&&(o=o.in("license",u)),m&&(o=o.order(m,{ascending:S==="asc",nullsFirst:!1})),o=o.range(y,x);const{data:d,error:F,count:b}=await o;if(F)throw F;const q=((performance.now()-k)/1e3).toFixed(2);return console.log(`🔎 Package fetch completed in ${q}s. Total matches: ${b}, returned: ${(d==null?void 0:d.length)||0}`),{packages:d||[],totalCount:b||0}}catch(o){throw console.error("❌ Error fetching packages:",o),o}}static async fetchUniqueTags(){console.log("  📌 Fetching unique tags...");const s=performance.now();try{const e=new Set;let n=0;const a=1e3;let c=!0,g=0;for(;c;){const{data:l,error:i}=await h.from("packages").select("tags").not("tags","is",null).range(n,n+a-1);if(i)throw console.error("  ❌ Tags query error:",i),i;if(!l||l.length===0){c=!1;break}l.forEach(r=>{r.tags&&Array.isArray(r.tags)&&r.tags.forEach(f=>{f&&f.trim()&&e.add(f.trim())})}),g+=l.length,c=l.length===a,n+=a}return console.log(`  📌 Tags query completed, processed ${g} total rows in ${((performance.now()-s)/1e3).toFixed(2)}s`),Array.from(e).sort()}catch(e){throw console.error("  ❌ Failed to fetch tags:",e),e}}static async fetchUniqueLicenses(){console.log("  📜 Fetching unique licenses...");const s=performance.now();try{const e=new Set;let n=0;const a=1e3;let c=!0,g=0;for(;c;){const{data:l,error:i}=await h.from("packages").select("license").not("license","is",null).range(n,n+a-1);if(i)throw console.error("  ❌ Licenses query error:",i),i;if(!l||l.length===0){c=!1;break}l.forEach(r=>{r.license&&r.license.trim()&&e.add(r.license.trim())}),g+=l.length,c=l.length===a,n+=a}return console.log(`  📜 Licenses query completed, processed ${g} total rows in ${((performance.now()-s)/1e3).toFixed(2)}s`),Array.from(e).sort()}catch(e){throw console.error("  ❌ Failed to fetch licenses:",e),e}}static async fetchFoldersAndCategories(){console.log("  📁 Fetching folders and categories...");const s=performance.now();try{const e={};let n=0;const a=1e3;let c=!0,g=0;for(;c;){const{data:r,error:f}=await h.from("packages").select("folder1, category1").not("folder1","is",null).range(n,n+a-1);if(f)throw console.error("  ❌ Folders/categories query error:",f),f;if(!r||r.length===0){c=!1;break}r.forEach(t=>{t.folder1&&(e[t.folder1]||(e[t.folder1]=new Set),t.category1&&e[t.folder1].add(t.category1))}),g+=r.length,c=r.length===a,n+=a}console.log(`  📁 Folders/categories query completed, processed ${g} total rows in ${((performance.now()-s)/1e3).toFixed(2)}s`);const l=Object.keys(e).sort(),i={};for(const r in e)i[r]=Array.from(e[r]).sort();return{folders:l,categories:i}}catch(e){throw console.error("  ❌ Failed to fetch folders/categories:",e),e}}static async fetchDatasetStats(){var e,n;console.log("  📊 Fetching dataset statistics...");const s=performance.now();try{console.log("    ⭐ Fetching max stars...");const{data:a,error:c}=await h.from("packages").select("github_stars").not("github_stars","is",null).order("github_stars",{ascending:!1}).limit(1);if(c)throw console.error("    ❌ Max stars query error:",c),c;console.log("    📚 Fetching max citations...");const{data:g,error:l}=await h.from("packages").select("citations").not("citations","is",null).order("citations",{ascending:!1}).limit(1);if(l)throw console.error("    ❌ Max citations query error:",l),l;console.log("    🔢 Fetching total count...");const{count:i,error:r}=await h.from("packages").select("*",{count:"exact",head:!0});if(r)throw console.error("    ❌ Count query error:",r),r;return console.log(`  📊 Stats queries completed in ${((performance.now()-s)/1e3).toFixed(2)}s`),{maxStars:((e=a==null?void 0:a[0])==null?void 0:e.github_stars)||null,maxCitations:((n=g==null?void 0:g[0])==null?void 0:n.citations)||null,totalCount:i||0}}catch(a){throw console.error("  ❌ Failed to fetch dataset stats:",a),a}}}export{$ as DataService};
