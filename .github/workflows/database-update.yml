name: Database Update Pipeline

on:
  schedule:
    # Run weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      test_only:
        description: 'Run tests only (skip database update)'
        required: false
        default: false
        type: boolean
      limit:
        description: 'Maximum packages to update (0 = all)'
        required: false
        default: '200'
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  update-database:
    name: Test and Update Database
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r cadd-vault-backend-scripts/requirements.txt
      
      - name: Create environment file
        run: |
          cd cadd-vault-backend-scripts
          cat > .env << EOF
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}
          CONTACT_EMAIL=${{ secrets.CROSSREF_EMAIL }}
          EOF
      
      - name: Run integration tests
        if: github.event.inputs.test_only != 'true'
        run: |
          cd cadd-vault-backend-scripts
          echo "🧪 Running integration tests..."
          pytest test_integration.py -v --tb=short --disable-warnings || {
            echo "❌ Tests failed - skipping database update"
            exit 1
          }
      
      - name: Run database update
        if: github.event.inputs.test_only != 'true'
        run: |
          cd cadd-vault-backend-scripts
          
          # Determine update parameters
          LIMIT="${{ github.event.inputs.limit || '200' }}"
          
          echo "🚀 Starting database update..."
          echo "📊 Configuration: limit=$LIMIT, days_since_update=7"
          
          # Run update with appropriate parameters
          if [ "$LIMIT" = "0" ]; then
            python update_database.py --all --days-since-update 7 --verbose
          else
            python update_database.py --limit $LIMIT --days-since-update 7 --verbose
          fi
      
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: update-logs-${{ github.run_id }}
          path: |
            cadd-vault-backend-scripts/database_update.log
            cadd-vault-backend-scripts/test-results.xml
          retention-days: 30
      
      - name: Create summary
        if: always()
        run: |
          cd cadd-vault-backend-scripts
          
          # Extract statistics from log
          if [ -f database_update.log ]; then
            TOTAL=$(grep -o "Total packages processed: [0-9]*" database_update.log | grep -o "[0-9]*" || echo "0")
            UPDATED=$(grep -o "Updated packages: [0-9]*" database_update.log | grep -o "[0-9]*" || echo "0")
            FAILED=$(grep -o "Failed packages: [0-9]*" database_update.log | grep -o "[0-9]*" || echo "0")
            
            if [ "${{ job.status }}" = "success" ]; then
              echo "## ✅ Database Update Successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- **Total packages processed**: $TOTAL" >> $GITHUB_STEP_SUMMARY
              echo "- **Packages updated**: $UPDATED" >> $GITHUB_STEP_SUMMARY
              echo "- **Failed packages**: $FAILED" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ❌ Database Update Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check logs for details." >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_Completed at $(date -u '+%Y-%m-%d %H:%M UTC')_" >> $GITHUB_STEP_SUMMARY
          fi